"""
LLM Service for AI-powered agriculture digest generation using Cursor AI
"""
import logging
import json
import re
from typing import List, Dict, Optional, Tuple
from config import USE_CURSOR_AI, LANGUAGE, DIGEST_CONFIG
from cursor_ai_service import CursorAIService

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LLMService:
    """Service for AI-powered content processing using Cursor AI"""
    
    def __init__(self):
        self.use_cursor_ai = USE_CURSOR_AI
        self.language = LANGUAGE
        self.is_russian = self.language == 'ru'
        
        # Initialize Cursor AI service
        if self.use_cursor_ai:
            try:
                self.cursor_ai = CursorAIService()
                logger.info("Cursor AI service initialized successfully")
            except Exception as e:
                logger.error(f"Failed to initialize Cursor AI: {str(e)}")
                self.cursor_ai = None
                self.use_cursor_ai = False
        else:
            self.cursor_ai = None
            logger.warning("Cursor AI is disabled, using fallback methods")
    
    async def rank_and_filter_articles(self, articles: List[Dict]) -> List[Dict]:
        """
        Use real AI to intelligently rank and filter agriculture articles
        
        Args:
            articles: List of article dictionaries
            
        Returns:
            AI-ranked and filtered list of articles
        """
        if not articles:
            return []
        
        if self.use_cursor_ai and self.cursor_ai:
            try:
                # Use real Cursor AI for ranking
                ranked_articles = await self.cursor_ai.analyze_and_rank_articles(articles)
                logger.info(f"Cursor AI ranked {len(ranked_articles)} articles from {len(articles)} total")
                return ranked_articles
                
            except Exception as e:
                logger.error(f"Error in Cursor AI ranking: {str(e)}")
                return self._fallback_rank_articles(articles)
        else:
            # Use fallback ranking
            return self._fallback_rank_articles(articles)
    
    def _intelligent_rank_articles(self, articles: List[Dict]) -> List[Dict]:
        """Intelligent ranking algorithm for agriculture articles"""
        def calculate_importance_score(article):
            score = 0
            title = article.get('title', '').lower()
            summary = article.get('summary', '').lower()
            source = article.get('source', '').lower()
            
            # High-impact keywords (Russian and English)
            high_impact_keywords = [
                '—Ü–µ–Ω–∞', 'price', '—Ä–æ—Å—Ç', 'rise', '–ø–∞–¥–µ–Ω–∏–µ', 'fall', '–∫—Ä–∏–∑–∏—Å', 'crisis',
                '—ç–∫—Å–ø–æ—Ä—Ç', 'export', '–∏–º–ø–æ—Ä—Ç', 'import', '—Ç–æ—Ä–≥–æ–≤–ª—è', 'trade',
                '–∑–∞—Å—É—Ö–∞', 'drought', '–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ', 'flood', '–ø–æ–≥–æ–¥–∞', 'weather',
                '–ø–æ–ª–∏—Ç–∏–∫–∞', 'policy', '–∑–∞–∫–æ–Ω', 'law', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', 'regulation'
            ]
            
            # Commodity keywords
            commodity_keywords = [
                '–ø—à–µ–Ω–∏—Ü–∞', 'wheat', '–∫—É–∫—É—Ä—É–∑–∞', 'corn', '—Å–æ—è', 'soybean', '—Ä–∏—Å', 'rice',
                '—è—á–º–µ–Ω—å', 'barley', '—Ä–æ–∂—å', 'rye', '–æ–≤–µ—Å', 'oats', '—Ö–ª–æ–ø–æ–∫', 'cotton'
            ]
            
            # Source credibility
            source_scores = {
                'fastmarkets': 5,
                'apk': 4,
                'margin': 4,
                'eldala': 3,
                'amis': 3
            }
            
            # Calculate scores
            for keyword in high_impact_keywords:
                if keyword in title:
                    score += 3
                if keyword in summary:
                    score += 2
            
            for keyword in commodity_keywords:
                if keyword in title:
                    score += 2
                if keyword in summary:
                    score += 1
            
            # Source credibility
            for source_key, source_score in source_scores.items():
                if source_key in source:
                    score += source_score
                    break
            
            # Length bonus
            if len(summary) > 100:
                score += 1
            
            # Recency bonus (if published date available)
            if article.get('published'):
                score += 1
            
            return score
        
        # Sort by importance score
        ranked_articles = sorted(articles, key=calculate_importance_score, reverse=True)
        
        # Limit to max articles
        max_articles = DIGEST_CONFIG.get('max_total_articles', 15)
        return ranked_articles[:max_articles]
    
    def _fallback_rank_articles(self, articles: List[Dict]) -> List[Dict]:
        """Simple fallback ranking"""
        return articles[:10]
    
    async def generate_digest_summary(self, articles: List[Dict]) -> str:
        """
        Generate an AI-powered digest summary in Russian
        
        Args:
            articles: List of ranked articles
            
        Returns:
            Formatted digest summary
        """
        if not articles:
            if self.is_russian:
                return "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            else:
                return "No agriculture news found today."
        
        if self.use_cursor_ai and self.cursor_ai:
            try:
                # Use real Cursor AI for digest generation
                digest = await self.cursor_ai.generate_intelligent_digest(articles)
                logger.info("Cursor AI generated digest successfully")
                return digest
                
            except Exception as e:
                logger.error(f"Error in Cursor AI digest generation: {str(e)}")
                return self._generate_fallback_digest(articles)
        else:
            # Use fallback digest generation
            return self._generate_fallback_digest(articles)
    
    def _generate_intelligent_digest(self, articles: List[Dict]) -> str:
        """Generate intelligent digest with market analysis"""
        from datetime import datetime
        
        # Get digest title
        if self.is_russian:
            title = DIGEST_CONFIG.get('digest_title_ru', 'üåæ –î–∞–π–¥–∂–µ—Å—Ç —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞')
        else:
            title = DIGEST_CONFIG.get('digest_title_en', 'üåæ Agriculture Market Digest')
        
        # Create header
        date_str = datetime.now().strftime('%d.%m.%Y')
        if self.is_russian:
            header = f"{title} - {date_str}\n\n"
            header += f"üìä **{len(articles)} —Å—Ç–∞—Ç–µ–π** –∏–∑ {len(set(article['source'] for article in articles))} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
        else:
            header = f"{title} - {date_str}\n\n"
            header += f"üìä **{len(articles)} articles** from {len(set(article['source'] for article in articles))} sources\n\n"
        
        # Analyze articles for key themes
        themes = self._analyze_market_themes(articles)
        
        # Generate executive summary
        if self.is_russian:
            summary = "üìà **–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è:**\n"
        else:
            summary = "üìà **Key Market Developments:**\n"
        
        summary += self._generate_executive_summary(articles, themes)
        summary += "\n"
        
        # Group articles by importance
        top_articles = articles[:8]  # Top 8 articles
        
        # Add articles with links
        if self.is_russian:
            summary += "üì∞ **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n"
        else:
            summary += "üì∞ **Top News:**\n\n"
        
        for i, article in enumerate(top_articles, 1):
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            source = article.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
            link = article.get('link', '')
            
            # Truncate long titles
            if len(title) > 80:
                title = title[:77] + "..."
            
            summary += f"**{i}. {title}**\n"
            summary += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
            
            if link and DIGEST_CONFIG.get('include_source_links', True):
                summary += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})\n"
            
            summary += "\n"
        
        # Add footer
        if self.is_russian:
            footer = "\n---\nü§ñ –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º Agriculture Digest\nüìÖ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        else:
            footer = "\n---\nü§ñ Generated by Agriculture Digest Bot\nüìÖ Updated daily"
        
        return header + summary + footer
    
    def _analyze_market_themes(self, articles: List[Dict]) -> Dict[str, int]:
        """Analyze articles to identify key market themes"""
        themes = {
            'prices': 0,
            'weather': 0,
            'trade': 0,
            'policy': 0,
            'technology': 0,
            'supply_demand': 0
        }
        
        theme_keywords = {
            'prices': ['—Ü–µ–Ω–∞', 'price', '—Ä–æ—Å—Ç', 'rise', '–ø–∞–¥–µ–Ω–∏–µ', 'fall', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost'],
            'weather': ['–ø–æ–≥–æ–¥–∞', 'weather', '–∑–∞—Å—É—Ö–∞', 'drought', '–¥–æ–∂–¥—å', 'rain', '–∫–ª–∏–º–∞—Ç', 'climate'],
            'trade': ['—Ç–æ—Ä–≥–æ–≤–ª—è', 'trade', '—ç–∫—Å–ø–æ—Ä—Ç', 'export', '–∏–º–ø–æ—Ä—Ç', 'import', '–ø–æ—Å—Ç–∞–≤–∫–∏', 'supply'],
            'policy': ['–ø–æ–ª–∏—Ç–∏–∫–∞', 'policy', '–∑–∞–∫–æ–Ω', 'law', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', 'regulation', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'government'],
            'technology': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', 'technology', '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', 'digital', '–∏–∏', 'ai', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'automation'],
            'supply_demand': ['—Å–ø—Ä–æ—Å', 'demand', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', 'supply', '—É—Ä–æ–∂–∞–π', 'harvest', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', 'production']
        }
        
        for article in articles:
            text = f"{article.get('title', '')} {article.get('summary', '')}".lower()
            for theme, keywords in theme_keywords.items():
                for keyword in keywords:
                    if keyword in text:
                        themes[theme] += 1
                        break
        
        return themes
    
    def _generate_executive_summary(self, articles: List[Dict], themes: Dict[str, int]) -> str:
        """Generate executive summary based on themes"""
        if self.is_russian:
            summary_parts = []
            
            if themes['prices'] > 0:
                summary_parts.append("‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ —Å–µ–ª—å—Ö–æ–∑–ø—Ä–æ–¥—É–∫—Ü–∏—é")
            if themes['weather'] > 0:
                summary_parts.append("‚Ä¢ –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ —Ä—ã–Ω–æ–∫")
            if themes['trade'] > 0:
                summary_parts.append("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö")
            if themes['policy'] > 0:
                summary_parts.append("‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã")
            if themes['technology'] > 0:
                summary_parts.append("‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
            
            if not summary_parts:
                summary_parts.append("‚Ä¢ –û–±—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
            
            return "\n".join(summary_parts[:3])  # Top 3 themes
        else:
            summary_parts = []
            
            if themes['prices'] > 0:
                summary_parts.append("‚Ä¢ Agricultural commodity price movements")
            if themes['weather'] > 0:
                summary_parts.append("‚Ä¢ Weather impact on markets")
            if themes['trade'] > 0:
                summary_parts.append("‚Ä¢ Trade flow changes")
            if themes['policy'] > 0:
                summary_parts.append("‚Ä¢ New regulatory measures")
            if themes['technology'] > 0:
                summary_parts.append("‚Ä¢ Technology adoption")
            
            if not summary_parts:
                summary_parts.append("‚Ä¢ General agricultural market trends")
            
            return "\n".join(summary_parts[:3])  # Top 3 themes
    
    async def summarize_article(self, article: Dict) -> str:
        """
        Generate AI-powered article summary in 2-3 sentences
        
        Args:
            article: Article dictionary
            
        Returns:
            AI-generated summary in 2-3 sentences
        """
        try:
            title = article.get('title', '')
            content = article.get('summary', '')
            
            # If we have Cursor AI available, use it for intelligent summarization
            if self.use_cursor_ai and self.cursor_ai:
                try:
                    # Prepare content for AI processing
                    full_content = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}"
                    
                    # Use Cursor AI to generate summary
                    ai_summary = await self.cursor_ai.generate_article_summary(full_content)
                    if ai_summary and len(ai_summary.strip()) > 10:
                        return ai_summary.strip()
                        
                except Exception as e:
                    logger.error(f"Cursor AI summarization failed: {str(e)}")
            
            # Fallback to intelligent summarization
            return self._generate_intelligent_summary(title, content)
            
        except Exception as e:
            logger.error(f"Error summarizing article: {str(e)}")
            return self._generate_fallback_summary(article)
    
    def _generate_intelligent_summary(self, title: str, content: str) -> str:
        """
        Generate intelligent summary based on content analysis
        
        Args:
            title: Article title
            content: Article content
            
        Returns:
            Intelligent summary in 2-3 sentences
        """
        try:
            # Combine title and content for analysis
            full_text = f"{title} {content}".lower()
            
            # Agriculture-specific keyword analysis
            if any(word in full_text for word in ['—É—Ä–æ–∂–∞–π', 'harvest', '—Å–±–æ—Ä', '—É–±–æ—Ä–∫–∞']):
                if self.is_russian:
                    return f"–°—Ç–∞—Ç—å—è –ø–æ—Å–≤—è—â–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞–º —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä. {self._extract_key_info(content)}"
                else:
                    return f"Article focuses on harvest and agricultural crop conditions. {self._extract_key_info(content)}"
            
            elif any(word in full_text for word in ['—Ü–µ–Ω–∞', 'price', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—ã–Ω–æ–∫']):
                if self.is_russian:
                    return f"–ú–∞—Ç–µ—Ä–∏–∞–ª –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –Ω–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é. {self._extract_key_info(content)}"
                else:
                    return f"Material analyzes price trends for agricultural products. {self._extract_key_info(content)}"
            
            elif any(word in full_text for word in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', 'technology', '–∏–Ω–Ω–æ–≤–∞—Ü–∏—è', '–Ω–æ–≤—ã–µ']):
                if self.is_russian:
                    return f"–°—Ç–∞—Ç—å—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è—Ö –≤ —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ. {self._extract_key_info(content)}"
                else:
                    return f"Article discusses new technologies and innovations in agriculture. {self._extract_key_info(content)}"
            
            elif any(word in full_text for word in ['–ø–æ–≥–æ–¥–∞', 'weather', '–∫–ª–∏–º–∞—Ç', '–¥–æ–∂–¥—å', '–∑–∞—Å—É—Ö–∞']):
                if self.is_russian:
                    return f"–ú–∞—Ç–µ—Ä–∏–∞–ª —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ. {self._extract_key_info(content)}"
                else:
                    return f"Material examines weather impact on agricultural production. {self._extract_key_info(content)}"
            
            elif any(word in full_text for word in ['—ç–∫—Å–ø–æ—Ä—Ç', 'export', '–∏–º–ø–æ—Ä—Ç', 'import', '—Ç–æ—Ä–≥–æ–≤–ª—è']):
                if self.is_russian:
                    return f"–°—Ç–∞—Ç—å—è –æ—Å–≤–µ—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π. {self._extract_key_info(content)}"
                else:
                    return f"Article covers international trade in agricultural products. {self._extract_key_info(content)}"
            
            else:
                # Generic summary
                if self.is_russian:
                    return f"–°—Ç–∞—Ç—å—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å—Ñ–µ—Ä–µ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞. {self._extract_key_info(content)}"
                else:
                    return f"Article contains current information about agriculture sector events. {self._extract_key_info(content)}"
                    
        except Exception as e:
            logger.error(f"Error in intelligent summary generation: {str(e)}")
            return self._generate_fallback_summary({'title': title, 'summary': content})
    
    def _extract_key_info(self, content: str) -> str:
        """
        Extract key information from content for summary
        
        Args:
            content: Article content
            
        Returns:
            Key information string
        """
        try:
            if not content or len(content) < 20:
                if self.is_russian:
                    return "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–µ."
                else:
                    return "Details available in the full article."
            
            # Extract first meaningful sentence or phrase
            sentences = content.split('.')
            for sentence in sentences:
                sentence = sentence.strip()
                if len(sentence) > 20 and len(sentence) < 100:
                    return sentence + "."
            
            # If no good sentence found, truncate content
            if len(content) > 80:
                return content[:80] + "..."
            else:
                return content
                
        except Exception as e:
            logger.error(f"Error extracting key info: {str(e)}")
            if self.is_russian:
                return "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–µ."
            else:
                return "Details available in the full article."
    
    def _generate_fallback_summary(self, article: Dict) -> str:
        """
        Generate fallback summary when AI is not available
        
        Args:
            article: Article dictionary
            
        Returns:
            Fallback summary
        """
        title = article.get('title', '')
        content = article.get('summary', '')
        
        if content and len(content) > 30:
            # Use content if available
            if len(content) > 100:
                return content[:100] + "..."
            return content
        elif title and len(title) > 10:
            # Use title as summary
            if self.is_russian:
                return f"–°—Ç–∞—Ç—å—è –æ: {title}"
            else:
                return f"Article about: {title}"
        else:
            if self.is_russian:
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö."
            else:
                return "Information about agricultural events."
    
    async def categorize_articles(self, articles: List[Dict]) -> Dict[str, List[Dict]]:
        """
        Intelligently categorize articles
        
        Args:
            articles: List of articles
            
        Returns:
            Dictionary with categories as keys and article lists as values
        """
        if not articles:
            return {}
        
        try:
            return self._intelligent_categorization(articles)
            
        except Exception as e:
            logger.error(f"Error categorizing articles: {str(e)}")
            return self._fallback_categorization(articles)
    
    def _intelligent_categorization(self, articles: List[Dict]) -> Dict[str, List[Dict]]:
        """Intelligent categorization algorithm"""
        if self.is_russian:
            categories = {
                '–ó–µ—Ä–Ω–æ–≤—ã–µ –∏ –º–∞—Å–ª–∏—á–Ω—ã–µ': [],
                '–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ': [],
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': [],
                '–†—ã–Ω–æ–∫ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è': [],
                '–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ': [],
                '–ü–æ–≥–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è': [],
                '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏': [],
                '–î—Ä—É–≥–æ–µ': []
            }
        else:
            categories = {
                'Grains & Oilseeds': [],
                'Livestock & Dairy': [],
                'Technology & Innovation': [],
                'Market & Trade': [],
                'Policy & Regulation': [],
                'Weather & Environment': [],
                'Regional Markets': [],
                'Other': []
            }
        
        # Define category keywords
        if self.is_russian:
            category_keywords = {
                '–ó–µ—Ä–Ω–æ–≤—ã–µ –∏ –º–∞—Å–ª–∏—á–Ω—ã–µ': ['–ø—à–µ–Ω–∏—Ü–∞', '–∫—É–∫—É—Ä—É–∑–∞', '—Å–æ—è', '—Ä–∏—Å', '—è—á–º–µ–Ω—å', '—Ä–æ–∂—å', '–æ–≤–µ—Å', '–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '—Ä–∞–ø—Å'],
                '–ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ': ['—Å–∫–æ—Ç', '—Å–≤–∏–Ω—å–∏', '–ø—Ç–∏—Ü–∞', '–º–æ–ª–æ–∫–æ', '–º—è—Å–æ', '–∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ', '–∫—Ä—É–ø–Ω—ã–π —Ä–æ–≥–∞—Ç—ã–π —Å–∫–æ—Ç'],
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', '–∏–∏', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Ä–æ–±–æ—Ç', '–¥—Ä–æ–Ω', '—Å–µ–Ω—Å–æ—Ä'],
                '–†—ã–Ω–æ–∫ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è': ['—Ü–µ–Ω–∞', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—ç–∫—Å–ø–æ—Ä—Ç', '–∏–º–ø–æ—Ä—Ç', '—Ä—ã–Ω–æ–∫', '–±–∏—Ä–∂–∞', '—Ñ—å—é—á–µ—Ä—Å'],
                '–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–ø–æ–ª–∏—Ç–∏–∫–∞', '–∑–∞–∫–æ–Ω', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—É–±—Å–∏–¥–∏—è', '–Ω–∞–ª–æ–≥'],
                '–ü–æ–≥–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è': ['–ø–æ–≥–æ–¥–∞', '–∑–∞—Å—É—Ö–∞', '–¥–æ–∂–¥—å', '–∫–ª–∏–º–∞—Ç', '—ç–∫–æ–ª–æ–≥–∏—è', '—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '—É–≥–ª–µ—Ä–æ–¥'],
                '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏': ['–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω', '—Ä–æ—Å—Å–∏—è', '—É–∫—Ä–∞–∏–Ω–∞', '–±–µ–ª–∞—Ä—É—Å—å', '—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω', '—Ä–µ–≥–∏–æ–Ω']
            }
        else:
            category_keywords = {
                'Grains & Oilseeds': ['wheat', 'corn', 'soybean', 'rice', 'barley', 'rye', 'oats', 'sunflower', 'rapeseed'],
                'Livestock & Dairy': ['cattle', 'pigs', 'poultry', 'milk', 'meat', 'livestock', 'dairy'],
                'Technology & Innovation': ['technology', 'digital', 'ai', 'automation', 'robot', 'drone', 'sensor'],
                'Market & Trade': ['price', 'trade', 'export', 'import', 'market', 'exchange', 'futures'],
                'Policy & Regulation': ['policy', 'law', 'regulation', 'government', 'subsidy', 'tax'],
                'Weather & Environment': ['weather', 'drought', 'rain', 'climate', 'environment', 'sustainability', 'carbon'],
                'Regional Markets': ['kazakhstan', 'russia', 'ukraine', 'belarus', 'uzbekistan', 'region']
            }
        
        # Categorize articles
        for article in articles:
            text = f"{article.get('title', '')} {article.get('summary', '')}".lower()
            categorized = False
            
            for category, keywords in category_keywords.items():
                for keyword in keywords:
                    if keyword in text:
                        categories[category].append(article)
                        categorized = True
                        break
                if categorized:
                    break
            
            if not categorized:
                if self.is_russian:
                    categories['–î—Ä—É–≥–æ–µ'].append(article)
                else:
                    categories['Other'].append(article)
        
        # Remove empty categories
        return {k: v for k, v in categories.items() if v}
    
    def _prepare_articles_for_llm(self, articles: List[Dict]) -> str:
        """Prepare articles text for processing"""
        articles_text = ""
        for i, article in enumerate(articles):
            title = article.get('title', '')
            summary = article.get('summary', '')
            source = article.get('source', '')
            
            articles_text += f"Article {i}:\n"
            articles_text += f"Title: {title}\n"
            articles_text += f"Summary: {summary}\n"
            articles_text += f"Source: {source}\n\n"
        
        return articles_text
    
    def _get_current_date(self) -> str:
        """Get current date string"""
        from datetime import datetime
        if self.is_russian:
            return datetime.now().strftime('%d.%m.%Y')
        else:
            return datetime.now().strftime('%B %d, %Y')
    
    def _generate_fallback_digest(self, articles: List[Dict]) -> str:
        """Generate fallback digest if AI fails"""
        from datetime import datetime
        
        if self.is_russian:
            title = "üåæ –î–∞–π–¥–∂–µ—Å—Ç —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"
            date_str = datetime.now().strftime('%d.%m.%Y')
            header = f"{title} - {date_str}\n\n"
            header += f"üìä **{len(articles)} —Å—Ç–∞—Ç–µ–π** –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞\n\n"
            
            digest = header
            
            for i, article in enumerate(articles[:10], 1):
                title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                source = article.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                link = article.get('link', '')
                
                digest += f"**{i}. {title}**\n"
                digest += f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                if link:
                    digest += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})\n"
                digest += "\n"
            
            digest += "---\nü§ñ –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º Agriculture Digest"
        else:
            title = "üåæ Agriculture Market Digest"
            date_str = datetime.now().strftime('%B %d, %Y')
            header = f"{title} - {date_str}\n\n"
            header += f"üìä **{len(articles)} articles** from agriculture news sources\n\n"
            
            digest = header
            
            for i, article in enumerate(articles[:10], 1):
                title = article.get('title', 'No title')
                source = article.get('source', 'Unknown source')
                link = article.get('link', '')
                
                digest += f"**{i}. {title}**\n"
                digest += f"üì∞ Source: {source}\n"
                if link:
                    digest += f"üîó [Read more]({link})\n"
                digest += "\n"
            
            digest += "---\nü§ñ Generated by Agriculture Digest Bot"
        
        return digest
    
    def _fallback_categorization(self, articles: List[Dict]) -> Dict[str, List[Dict]]:
        """Fallback categorization method"""
        if self.is_russian:
            categories = {
                '–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞': articles[:5],
                '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞': articles[5:10] if len(articles) > 5 else []
            }
        else:
            categories = {
                'Agriculture News': articles[:5],
                'Market Updates': articles[5:10] if len(articles) > 5 else []
            }
        return {k: v for k, v in categories.items() if v}

def main():
    """Test the LLM service"""
    import asyncio
    
    async def test_llm():
        try:
            llm = LLMService()
            
            # Test articles
            test_articles = [
                {
                    'title': 'Wheat Prices Rise Due to Drought Conditions',
                    'summary': 'Global wheat prices have increased by 15% this month due to severe drought conditions in major wheat-producing regions.',
                    'source': 'Fastmarkets Agriculture'
                },
                {
                    'title': 'New Precision Agriculture Technology Launched',
                    'summary': 'A new AI-powered precision agriculture system has been launched to help farmers optimize crop yields.',
                    'source': 'APK-Inform'
                }
            ]
            
            # Test ranking
            ranked = await llm.rank_and_filter_articles(test_articles)
            print(f"Ranked {len(ranked)} articles")
            
            # Test digest generation
            digest = await llm.generate_digest_summary(ranked)
            print("\nGenerated Digest:")
            print(digest)
            
        except Exception as e:
            print(f"Error: {str(e)}")
    
    asyncio.run(test_llm())

if __name__ == "__main__":
    main()
