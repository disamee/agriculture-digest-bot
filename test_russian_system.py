"""
Test script for the Russian Agriculture Digest Bot system
"""
import asyncio
import logging
from scraper import NewsScraper
from processor import ContentProcessor
from llm_service import LLMService

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_russian_digest():
    """Test the system with Russian language support"""
    print("üåæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Agriculture Digest Bot –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    print("=" * 60)
    
    # Test LLM service
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        llm = LLMService()
        print("   ‚úÖ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìù –Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if llm.is_russian else 'English'}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
    
    # Test processor
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    try:
        processor = ContentProcessor()
        print("   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìù –Ø–∑—ã–∫: {'–†—É—Å—Å–∫–∏–π' if processor.is_russian else 'English'}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {str(e)}")
    
    # Sample articles for testing
    sample_articles = [
        {
            'title': '–¶–µ–Ω—ã –Ω–∞ –ø—à–µ–Ω–∏—Ü—É –≤—ã—Ä–æ—Å–ª–∏ –∏–∑-–∑–∞ –∑–∞—Å—É—Ö–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
            'summary': '–¶–µ–Ω—ã –Ω–∞ –ø—à–µ–Ω–∏—Ü—É –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 15% –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏–∑-–∑–∞ —Å–∏–ª—å–Ω–æ–π –∑–∞—Å—É—Ö–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–µ—Ä–Ω–æ–ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.',
            'link': 'https://example.com/wheat-prices-kz',
            'source': 'Margin.kz'
        },
        {
            'title': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ç–æ—á–Ω–æ–≥–æ –∑–µ–º–ª–µ–¥–µ–ª–∏—è –≤–Ω–µ–¥—Ä—è—é—Ç—Å—è –≤ –†–æ—Å—Å–∏–∏',
            'summary': '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—á–Ω–æ–≥–æ –∑–µ–º–ª–µ–¥–µ–ª–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–º–æ—â–∏ —Ñ–µ—Ä–º–µ—Ä–∞–º –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏.',
            'link': 'https://example.com/precision-ag-ru',
            'source': 'APK-Inform'
        },
        {
            'title': '–≠–∫—Å–ø–æ—Ä—Ç –∑–µ—Ä–Ω–∞ –∏–∑ –†–æ—Å—Å–∏–∏ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 20%',
            'summary': '–≠–∫—Å–ø–æ—Ä—Ç –∑–µ—Ä–Ω–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä –∏–∑ –†–æ—Å—Å–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 20% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º.',
            'link': 'https://example.com/grain-export-ru',
            'source': 'Fastmarkets Agriculture'
        }
    ]
    
    print(f"\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {len(sample_articles)} –æ–±—Ä–∞–∑—Ü–∞–º–∏ —Å—Ç–∞—Ç–µ–π...")
    
    # Test filtering
    print("   üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π...")
    relevant = processor.filter_relevant_articles(sample_articles)
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(relevant)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    
    if not relevant:
        print("   ‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # Test ranking
    print("   üìä –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π...")
    ranked = await processor.rank_articles(relevant)
    print(f"   ‚úÖ –û—Ç—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–æ {len(ranked)} —Å—Ç–∞—Ç–µ–π")
    
    # Test digest generation
    print("   üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
    digest = await processor.format_digest(ranked)
    print(f"   ‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(digest)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # Show sample digest
    print("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞:")
    print("-" * 50)
    print(digest[:800] + "..." if len(digest) > 800 else digest)
    
    # Test categorization
    print("\nüè∑Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    categories = await processor.group_articles_by_topic(ranked)
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    for category, articles in categories.items():
        print(f"      ‚Ä¢ {category}: {len(articles)} —Å—Ç–∞—Ç–µ–π")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    
    # Show configuration
    print("\n‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   üåê –Ø–∑—ã–∫: {processor.language}")
    print(f"   ü§ñ AI –≤–∫–ª—é—á–µ–Ω: {processor.use_llm}")
    print(f"   üìä –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π: {len(ranked)}")
    print(f"   üîó –°—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã: {processor.llm_service.use_cursor_ai}")

async def test_scraper_sources():
    """Test scraping from your specific sources"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    scraper = NewsScraper()
    
    # Test a few sources
    from config import NEWS_SOURCES
    
    for source in NEWS_SOURCES[:2]:  # Test first 2 sources
        print(f"\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {source['name']}...")
        try:
            articles = scraper.scrape_source(source)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            
            if articles:
                print(f"   üìù –ü—Ä–∏–º–µ—Ä: {articles[0].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    """Main test function"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Agriculture Digest Bot")
    
    # Test Russian digest generation
    asyncio.run(test_russian_digest())
    
    # Test scraping (optional, can be slow)
    # asyncio.run(test_scraper_sources())
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python main.py' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π '/digest' –≤ Telegram")

if __name__ == "__main__":
    main()
